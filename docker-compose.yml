version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: expense_postgres
    environment:
      POSTGRES_DB: expense_system
      POSTGRES_USER: expense_user
      POSTGRES_PASSWORD: expense_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U expense_user -d expense_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: expense_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build: .
    container_name: expense_app
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://expense_user:expense_password@postgres:5432/expense_system
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      ALLOWED_ORIGINS: "http://localhost:3000,https://yourdomain.com"
      ALLOWED_HOSTS: "localhost,yourdomain.com"
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    volumes:
      - upload_data:/tmp/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: expense_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
  upload_data:

networks:
  default:
    name: expense_network